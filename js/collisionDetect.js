// Generated by CoffeeScript 1.4.0

define(['translator', 'settings'], function(translator, settings) {
  return {
    externalLimits: function(points) {
      var maxX, maxY, minX, minY, point, _i, _len;
      minX = maxX = minY = maxY = 0;
      for (_i = 0, _len = points.length; _i < _len; _i++) {
        point = points[_i];
        if (point[0] < minX) {
          minX = point[0];
        }
        if (point[0] > maxX) {
          maxX = point[0];
        }
        if (point[1] < minY) {
          minY = point[1];
        }
        if (point[1] > maxY) {
          maxY = point[1];
        }
      }
      return [[minX, minY], [maxX, maxY]];
    },
    rectanglesCollide: function(shapeExternals1, position1, shapeExternals2, position2) {
      var point, translatedBox1, translatedBox2;
      translatedBox1 = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = shapeExternals1.length; _i < _len; _i++) {
          point = shapeExternals1[_i];
          _results.push(translator.translate(point, position1));
        }
        return _results;
      })();
      translatedBox2 = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = shapeExternals2.length; _i < _len; _i++) {
          point = shapeExternals2[_i];
          _results.push(translator.translate(point, position2));
        }
        return _results;
      })();
      return translatedBox1[0][0] < translatedBox2[1][0] && translatedBox1[1][0] > translatedBox2[0][0] && translatedBox1[0][1] < translatedBox2[1][1] && translatedBox1[1][1] > translatedBox2[0][1];
    },
    landedSafely: function(shipState, baseState) {
      var _ref;
      (settings.ship.landing.maxDownwardSpeed >= (_ref = shipState.velocity[1]) && _ref >= 0);
      Math.abs(shipState.velocity[0]) <= settings.ship.landing.maxSidewardSpeed;
      shipState.direction >= 2 * Math.pi - settings.ship.landing.maxAngleFromVertical;
      shipState.direction <= settings.ship.landing.maxAngleFromVertical;
      return false;
    }
  };
});
