// Generated by CoffeeScript 1.4.0
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

define(['physics'], function(physics) {
  var ShipState;
  return ShipState = (function() {

    function ShipState(settings) {
      this.settings = settings;
      this.thrustOn = __bind(this.thrustOn, this);

      this.changeDirection = __bind(this.changeDirection, this);

      this.velocityX = 0;
      this.velocityY = 0;
      this.direction = 0;
      this.positionX = 0;
      this.positionY = 0;
      this.thrusting = false;
      this.mass = 1;
    }

    ShipState.prototype.changeDirection = function(delta) {
      var radFactor;
      if (delta) {
        this.direction += delta;
        radFactor = Math.PI / 180;
        if (this.direction >= radFactor) {
          this.direction -= radFactor;
        }
        if (this.direction < 0) {
          return this.direction += radFactor;
        }
      }
    };

    ShipState.prototype.thrustOn = function(bool) {
      return this.thrusting = bool;
    };

    ShipState.prototype.updatePosition = function() {
      var calc, def, directionDefs, self, _i, _len, _results;
      self = this;
      calc = function(def) {
        var currentAcceleration, currentForce;
        currentForce = def[2];
        if (this.thrusting) {
          currentForce -= self.settings.ship.thrustRatio * def[1](self.direction);
        }
        currentAcceleration = currentForce * self.mass;
        self['velocity' + def[0]] += currentAcceleration;
        return self['position' + def[0]] += currentAcceleration;
      };
      directionDefs = [['X', Math.sin, 0], ['Y', Math.cos, this.settings.game.gravity]];
      _results = [];
      for (_i = 0, _len = directionDefs.length; _i < _len; _i++) {
        def = directionDefs[_i];
        _results.push(calc(def));
      }
      return _results;
    };

    return ShipState;

  })();
});
