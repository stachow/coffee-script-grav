// Generated by CoffeeScript 1.4.0
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

define(['shipShape', 'rotationTranslator', 'collisionDetect'], function(shipShape, rotationTranslator, collisionDetect) {
  var ShipState;
  return ShipState = (function() {

    function ShipState(settings) {
      this.settings = settings;
      this.engineRotatedPoints = __bind(this.engineRotatedPoints, this);

      this.externalBoxPoints = __bind(this.externalBoxPoints, this);

      this.livePoints = __bind(this.livePoints, this);

      this.thrustOn = __bind(this.thrustOn, this);

      this.changeDirection = __bind(this.changeDirection, this);

      this.velocityX = 0;
      this.velocityY = 0;
      this.direction = 0;
      this.positionX = 0;
      this.positionY = 0;
      this.thrusting = false;
      this.mass = 1;
    }

    ShipState.prototype.changeDirection = function(delta) {
      var radFactor;
      if (delta) {
        this.direction += delta;
        radFactor = Math.PI / 180;
        if (this.direction >= radFactor) {
          this.direction -= radFactor;
        }
        if (this.direction < 0) {
          this.direction += radFactor;
        }
      }
    };

    ShipState.prototype.thrustOn = function(bool) {
      this.thrusting = bool;
    };

    ShipState.prototype.updatePosition = function() {
      var currentAccelerationX, currentAccelerationY, currentForceX, currentForceY;
      currentForceY = this.settings.game.gravity;
      if (this.thrusting) {
        currentForceY += -1 * Math.cos(this.direction) * this.settings.ship.thrustRatio;
      }
      currentForceY += -1 * this.velocityY * this.settings.game.viscosity;
      currentAccelerationY = currentForceY * this.mass;
      this.velocityY += currentAccelerationY;
      this.positionY += this.velocityY;
      currentForceX = 0;
      if (this.thrusting) {
        currentForceX += Math.sin(this.direction) * this.settings.ship.thrustRatio;
      }
      currentForceX += -1 * this.velocityX * this.settings.game.viscosity;
      currentAccelerationX = currentForceX * this.mass;
      this.velocityX += currentAccelerationX;
      this.positionX += this.velocityX;
    };

    ShipState.prototype.livePoints = function() {
      var point, _i, _len, _ref, _results;
      _ref = shipShape.points;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        point = _ref[_i];
        _results.push(rotationTranslator(point[0], point[1], this.direction));
      }
      return _results;
    };

    ShipState.prototype.externalBoxPoints = function() {
      return collisionDetect.externalLimits(this.livePoints());
    };

    ShipState.prototype.engineRotatedPoints = function() {
      var point, _i, _len, _ref, _results;
      _ref = shipShape.enginePoints;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        point = _ref[_i];
        _results.push(rotationTranslator(point[0], point[1], this.direction));
      }
      return _results;
    };

    return ShipState;

  })();
});
